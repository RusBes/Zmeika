using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Zmeika
{
    public partial class Form1 : Form
    {
        public enum Direction
        {
            up,
            down,
            left,
            right,
            none
        };
        int Speed
        {
            get { return num_speed; }
            set
            {
                num_speed = value;
                timer.Interval = speed_arr[num_speed];
            }
        }
        Direction dir;
        public static List<List<Point>> list;
        Random rnd = new Random();
        Panel food;
        Zmeika zmei;
        Point prev_loc;
        int num_speed;
        //int speed; // інтервал таймер-тіка
        Point[,] masarray;
        DateTime key_down_time;
        bool key_down = false;
        //int howfast = 180;
        int time_to_fast = 200;
        bool is_fast = false;
        int min_speed = 1;
        int max_speed = 10;
        int[] speed_arr = new int[] { 500, 430, 390, 340, 300, 250, 220, 180, 120, 90, 50, 20 };
        //public char direct;

        public Form1()
        {
            InitializeComponent();
            list = new List<List<Point>>();
            for (int i = 0; i * 10 < zona.Width; i++)
            {
                list.Add(new List<Point>());
                for (int j = 0; j * 10 < zona.Height; j++)
                {
                    list[i].Add(new Point(i * 10, j * 10));
                }
            }
            masarray = new Point[list.Count, list[0].Count];
            for (int i = 0; i < masarray.GetLength(0); i++)
            {
                for (int j = 0; j < masarray.GetLength(1); j++)
                {
                    masarray[i, j] = list[i][j];
                }
            }
        }

        Panel CreateFood(Point[,] masarray, int foodsize)
        {
            Panel food = new Panel();
            Point foodlocation = masarray[rnd.Next(masarray.GetLength(0) - 1), rnd.Next(masarray.GetLength(1) - 1)];
            food.Location = foodlocation;
            food.Size = new Size(foodsize, foodsize);
            food.BackColor = Color.Red;
            food.BorderStyle = BorderStyle.FixedSingle;
            return food;
        }
        void GameOver()
        {
            timer.Stop();
            MessageBox.Show("Game Over");
        }
        bool IsEatFood()
        {
            if (zmei.segments[0].Location == food.Location)
                return true;
            return false;
        }
        void Slowly()
        {
            Speed = num_speed - 2;
        }
        void Faster()
        {
            Speed = num_speed + 2;
        }

        private void butstart_Click(object sender, EventArgs e)
        {
            timer.Stop();
            if (zmei != null)
            {
                for (int i = 0; i < zmei.segments.Count; i++)
                {
                    zona.Controls.Remove(zmei.segments[i]);
                }
            }
            zona.Controls.Remove(food);
            dir = Direction.none;
            zmei = new Zmeika(masarray, zona);
            prev_loc = zmei.segments[0].Location;

            food = CreateFood(masarray, Zmeika.segsize);
            zona.Controls.Add(food);
            butstart1.KeyDown -= new KeyEventHandler(Form1_KeyDown);
            butstart1.KeyUp -= new KeyEventHandler(Form1_KeyUp);
            butstart1.KeyDown += new KeyEventHandler(Form1_KeyDown);
            butstart1.KeyUp += new KeyEventHandler(Form1_KeyUp);
            butstart1.Focus();

            //KeyDown -= new KeyEventHandler(Form1_KeyDown);
            //KeyUp -= new KeyEventHandler(Form1_KeyUp);
            //KeyDown += new KeyEventHandler(Form1_KeyDown);
            //KeyUp += new KeyEventHandler(Form1_KeyUp);

            //bool v = Focus();
            //bool v1 = textBox1.CanFocus;
            //v = textBox1.Focused;

            //this.Focus();
            //v1 = this.CanFocus;
            //v = this.Focused;

            Speed = Convert.ToInt32(tbSpeed.Text) - 1;
            timer.Start();
        }
        private void timer_Tick(object sender, EventArgs e)
        {
            if (key_down)
            {
                if ((DateTime.Now - key_down_time).Milliseconds > time_to_fast)
                {
                    Faster();
                    is_fast = true;
                    key_down = false;
                }
            }
            if (IsEatFood())
            {
                //zona.Controls.Add(zmei.CreateSeg(food.Location.X, food.Location.Y, Zmeika.segsize));
                zona.Controls.Add(zmei.CreateSeg(1000, 1000, Zmeika.segsize));
                zona.Controls.Remove(food);
                food = CreateFood(masarray, Zmeika.segsize);
                zona.Controls.Add(food);
            }
            if (dir != Direction.none)
            {
                zmei.Moove(dir);
            }

            #region is_game_over
            if (zmei.IsEatMyself())
            {
                GameOver();
                return;
            }
            else if (zmei.IsMooveOutOfZona())
            {
                GameOver();
                return;
            }
            #endregion

        }
        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {

        }
        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (!key_down)
            {
                Point p = new Point(zmei.segments[0].Location.X - prev_loc.X, zmei.segments[0].Location.Y - prev_loc.Y);
                Direction d = Direction.none;
                if (p.X > 0)
                    d = Direction.right;
                else if (p.X < 0)
                    d = Direction.left;
                else if (p.Y > 0)
                    d = Direction.down;
                else if (p.Y < 0)
                    d = Direction.up;

                if (e.KeyCode == Keys.A && d != Direction.right)
                {
                    dir = Direction.left;
                }
                else if (e.KeyCode == Keys.D && d != Direction.left)
                {
                    dir = Direction.right;
                }
                else if (e.KeyCode == Keys.W && d != Direction.down)
                {
                    dir = Direction.up;
                }
                else if (e.KeyCode == Keys.S && d != Direction.up)
                {
                    dir = Direction.down;
                }
                else
                    return;
            }

            prev_loc = zmei.segments[0].Location;
            key_down = true;
            key_down_time = DateTime.Now;
        }
        private void Form1_KeyUp(object sender, KeyEventArgs e)
        {
            if (is_fast)
                Slowly();
            key_down = false;
            is_fast = false;
        }
        private void butPlus_Click(object sender, EventArgs e)
        {
            int new_speed = Convert.ToInt32(tbSpeed.Text) + 1;
            if (new_speed < max_speed + 1 && new_speed >= min_speed + 1)
            {
                tbSpeed.Text = new_speed.ToString();
                Speed = new_speed - 1;
            }
        }
        private void butMinus_Click(object sender, EventArgs e)
        {
            int new_speed = Convert.ToInt32(tbSpeed.Text) - 1;

            if (new_speed > min_speed - 1)
            {
                tbSpeed.Text = new_speed.ToString();
                Speed = new_speed - 1;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Focus();
        }
    }




    class Zmeika
    {
        public static int segsize = 10;
        public static int segkst = 1;
        public List<Panel> segments;
        PictureBox zona;
        public Point Ptmp = new Point();

        public Zmeika(Point[,] array, PictureBox zona_)
        {
            zona = zona_;
            segments = new List<Panel>();
            int x = zona.Width / 2 - (zona.Width / 2) % segsize;
            int y = zona.Height / 2 - (zona.Height / 2) % segsize;
            Panel seg = CreateSeg(x, y, segsize);
            //Panel seg = new Panel();
            //seg.Location = new Point(zona.Width / 2 - segsize, zona.Height / 2 - segsize);
            //seg.Size = new Size(segsize, segsize);
            //segments.Add(seg);

            zona.Controls.Add(segments[0]);
        }
        public Panel CreateSeg(int x, int y, int size)
        {
            Panel p = new Panel();
            p.BackColor = Color.Green;
            p.BorderStyle = BorderStyle.FixedSingle;
            //if (x == 0 && y == 0)
            //    p.Location = new Point(Ptmp.X + 10, Ptmp.Y);
            //else
            p.Location = new Point(x, y);
            p.Size = new Size(size, size);
            segments.Add(p);
            return p;
        }
        public void Moove(Form1.Direction d)
        {
            if (d == Form1.Direction.left)
            {
                Ptmp = segments[0].Location;
                segments[0].Location = new Point(segments[0].Location.X - 10, segments[0].Location.Y);
                ZsuvSegments(Ptmp);
            }
            else if (d == Form1.Direction.right)
            {
                Ptmp = segments[0].Location;
                segments[0].Location = new Point(segments[0].Location.X + 10, segments[0].Location.Y);
                ZsuvSegments(Ptmp);
            }
            else if (d == Form1.Direction.up)
            {
                Ptmp = segments[0].Location;
                segments[0].Location = new Point(segments[0].Location.X, segments[0].Location.Y - 10);
                ZsuvSegments(Ptmp);
            }
            else if (d == Form1.Direction.down)
            {
                Ptmp = segments[0].Location;
                segments[0].Location = new Point(segments[0].Location.X, segments[0].Location.Y + 10);
                ZsuvSegments(Ptmp);
            }
        }
        public void ZsuvSegments(Point Ptmp)
        {
            Point Ptmp0 = new Point();
            for (int i = 1; i < segments.Count; i++)
            {
                Ptmp0 = segments[i].Location;
                segments[i].Location = Ptmp;
                Ptmp = Ptmp0;
            }
        }
        public bool IsEatMyself()
        {
            for (int i = 1; i < segments.Count; i++)
                if (segments[0].Location == segments[i].Location)
                    return true;
            return false;
        }
        public bool IsMooveOutOfZona()
        {
            if (segments[0].Location.X < 0 || segments[0].Location.Y < 0 || segments[0].Location.X + segsize > zona.Width || segments[0].Location.Y + segsize > zona.Height)
                return true;
            return false;
        }

    }
}
